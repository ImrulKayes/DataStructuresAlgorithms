class Color:    White = 'White'    Black = 'Black'class Direction:    left = 'left'    right = 'right'    up = 'up'    down = 'down'class Piece(object):    color = Color()    def __init__(self, c):        self.color = c    def flip(self):        if self.color == Color.Black:            self.color = Color.White        else:            self.color = Color.Black    def getColor(self):        return self.colorclass Location(object):    row = int()    column = int()    def __init__(self, r, c):        self.row = r        self.column = c    def isSameAs(self, r, c):        return self.row == r and self.column == c    def getRow(self):        return self.row    def getColumn(self):        return self.columnclass Game(object):    players = []    instance_ = Game()    board = Board()    ROWS = 10    COLUMNS = 10    def __init__(self):        self.board = Board(self.ROWS, self.COLUMNS)        self.players = [None]*2        self.players[0] = Player(Color.Black)        self.players[1] = Player(Color.White)        Automator.getInstance().initialize(self.players)        #  used for testing    @classmethod    def getInstance(cls):        if cls.instance_ == None:            cls.instance_ = Game()        return cls.instance_    def getBoard(self):        return self.boardclass Board(object):    blackCount = 0    whiteCount = 0    board = []    def __init__(self, rows, columns):        self.board = [None]*rows    def initialize(self):        #  initial board has a grid like the following in the center:        # 		 *     WB        # 		 *     BW        # 		         middleRow = len(board)        middleColumn = len(length)        self.board[middleRow][middleColumn] = Piece(Color.White)        self.board[middleRow + 1][middleColumn] = Piece(Color.Black)        self.board[middleRow + 1][middleColumn + 1] = Piece(Color.White)        self.board[middleRow][middleColumn + 1] = Piece(Color.Black)        self.blackCount = 2        self.whiteCount = 2    def placeColor(self, row, column, color):        if self.board[row][column] != None:            return False        results = [None]*4        results[0] = flipSection(row - 1, column, color, Direction.up)        results[1] = flipSection(row + 1, column, color, Direction.down)        results[2] = flipSection(row, column + 1, color, Direction.right)        results[3] = flipSection(row, column - 1, color, Direction.left)        flipped = 0        for result in results:            if result > 0:                flipped += result        if flipped < 0:            return False        self.board[row][column] = Piece(color)        updateScore(color, flipped + 1)        return True    def flipSection(self, row, column, color, d):        r = 0        c = 0        if d==up:            r = -1        elif d==down:            r = 1        elif d==left:            c = -1        elif d==right:            c = 1        if row < 0 or len(board) or column < 0 or len(length) or self.board[row][column] == None:            return -1        if self.board[row][column].getColor() == color:            return 0        flipped = self.flipSection(row + r, column + c, color, d)        if flipped < 0:            return -1        self.board[row][column].flip()        return flipped + 1    def getScoreForColor(self, c):        if c == Color.Black:            return self.blackCount        else:            return self.whiteCount    def updateScore(self, newColor, newPieces):        if newColor == Color.Black:            self.whiteCount -= newPieces - 1            self.blackCount += newPieces        else:            self.blackCount -= newPieces - 1            self.whiteCount += newPieces    def printBoard(self):        r = 0        while len(board):            while len(length):                if self.board[r][c] == None:                    print "_",                elif self.board[r][c].getColor() == Color.White:                    print "W",                else:                    print "B",                c += 1            print             r += 1class Automator(object):    players = []    lastPlayer = None    remainingMoves = ArrayList()    instance_ = Automator()    def __init__(self):        i = 0        while i < 10:            while j < 10:                self.remainingMoves.add(loc)                j += 1            i += 1    @classmethod    def getInstance(cls):        if cls.instance_ == None:            cls.instance_ = Automator()        return cls.instance_    def initialize(self, ps):        self.players = ps        self.lastPlayer = self.players[1]    def shuffle(self):        i = 0        while i < len(self.remainingMoves):            self.remainingMoves.set(t, current)            self.remainingMoves.set(i, other)            i += 1    def removeLocation(self, r, c):        i = 0        while i < len(self.remainingMoves):            if loc.isSameAs(r, c):                self.remainingMoves.remove(i)            i += 1    def getLocation(self, index):        return self.remainingMoves.get(index)    def playRandom(self):        board = Game.getInstance().getBoard()        self.shuffle()        self.lastPlayer = self.players[1] if self.lastPlayer == self.players[0] else self.players[0]        color = self.lastPlayer.getColor().__str__()        i = 0        while i < len(self.remainingMoves):            if success:                print "Success: " + color + " move at (" + loc.getRow() + ", " + loc.getColumn() + ")"                board.printBoard()                printScores()                return True            i += 1        print "Game over. No moves found for " + color        return False    def isOver(self):        """ generated source for method isOver """        if self.players[0].getScore() == 0 or self.players[1].getScore() == 0:            return True        return False    def printScores(self):        """ generated source for method printScores """        print "Score: " + self.players[0].getColor().__str__() + ": " + self.players[0].getScore() + ", " + self.players[1].getColor().__str__() + ": " + self.players[1].getScore()if __name__=="__main__":        game = Game.getInstance()        game.getBoard().initialize()        game.getBoard().printBoard()        automator = Automator.getInstance()        while not automator.isOver() and automator.playRandom():            pass        automator.printScores()