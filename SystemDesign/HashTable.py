'''Design a hash table whth maxsize=10Here we have resolve collision using chaining (which demands extra meory), other methods might be  probing:these techniques are generally known as probing (e.g.,), or looking for the record in other buckets. Basically, if we can't insert the record in its assigned bucket, we try to use other buckets,until we can insert it. Similarly, when we must look for the record, we search (or probe) for it beginning with its assigned bucket, but then through other buckets.A good review of all these apporaches are here: https://www.andrew.cmu.edu/course/15-310/applications/ln/hashing-review.html'''class Cell:        # for individual key, value pair    def __init__(self,key,value):        self._key=key        self._value=value            def getKey(self):        return self._key        def getValue(self):        return self._value        def setValue(self,value):        self._value=value        class Hash:    MAXSIZE=10    # define a hash of size 10, simply it will contain 10 lists of Cell    def __init__(self):        self._items=[[] for i in range(self.MAXSIZE)]    def getHashVal(self,key):        return len(str(key))%self.MAXSIZE            def put(self,key,value):        # get hash value        hashVal=self.getHashVal(key)        # if the key is not present, add a cell        if not self._items[hashVal]:            cell=Cell(key,value)            self._items[hashVal].append(cell)        # else either resolve collsion by adding a new cell or updating an old cell        else:            for cell in self._items[hashVal]:                if cell.getKey()==key:                    cell.setValue(value)                    return            cell=Cell(key,value)            self._items[hashVal].append(cell)    def get(self,key):        hashVal=self.getHashVal(key)        # if key is there originally or not in that hash value        if self._items[hashVal]:            for cell in self._items[hashVal]:                if cell.getKey()==key:                    return cell.getValue()            return None        else:            return None        def printHash(self):        for item in self._items:            for cell in item:                print cell.getKey(),cell.getValue()if __name__=="__main__":    hash = Hash()    hash.put("1","1")    hash.put("2","2")    hash.put("2","24")    hash.printHash()    print hash.get("2")        