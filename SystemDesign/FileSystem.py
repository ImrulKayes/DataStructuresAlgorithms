'''Design a an in-memory file system.Dont panic! Design something simple. What consists of a file system? Files and Directories. Each directory has multiples directory and files in it.Files are Directories have a lot of common characteristics. So, use an Entry class as a base and inherit Flies and Directories from that.'''from datetime import datetimefrom abc import ABCMeta, abstractmethod # used for the abstract base classclass Entry:    # this tells us that this is an abstract class    __metaclass__=ABCMeta        def __init__(self,name,parentDirectory):        self._name=name        self._parentDirectory=parentDirectory        self._created=datetime.now()        self._lastUpdated=datetime.now()        self._lastAccessed=datetime.now()    #abc module allows to enforce that a derived class implements a particular method using a special @abstractmethod decorator on that method.    @abstractmethod      def size(self): pass    # recursively get the full path of the entry (directory/file)    def getFullPath(self):        if not self._parentDirectory:            return self._name        else:            return self._parentDirectory.getFullPath()+"/"+self._name    '''    Below write getters and setters of all attributes    '''        class File(Entry):    def __init__(self,name,parentDirectroy,size):        Entry.__init__(self,name,parentDirectroy)        self._size=size        self._content=""    def size(self):        return self._size        '''    Below write getters and setters of all attributes    '''class Directory(Entry):    def __init__(self,name,parentDirectory):        Entry.__init__(self,name,parentDirectory)        self._contents=[]  # each directory has contents (files/directories) in Java it's a problem that we can only put the same object in an ArryList like contents= new ArrayList<Entry>(), so we have to use Entry and do typecast later, in python we dont have this problem    def numberOfFiles(self):        # directory contains files and directories        # total number of files are files + total files inside directories        # directory itself is a file        count=1        for item in self._contents:            if isinstance(item,File):                count+=1            else:                count+=item.numberOfFiles()        return count        def size(self):        size=0        for item in self._contents:            size=item.size()                def addFile(self,file):        self._contents.append(file)            def addDirectory(self,directory):        self._contents.append(directory)            if __name__=='__main__':    root= Directory("Food", None)    taco= File("Taco", root, 4)    hamburger=File("Hamburger",root,9)    root.addFile(taco)    root.addFile(hamburger)    print root.numberOfFiles()        