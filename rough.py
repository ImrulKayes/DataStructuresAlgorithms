class Solution():    def MakingChange1(self,num,coins):        if num<0:            return -1        if num==0:            return 0        if num>=coins[0]:            if self.MakingChange(num-coins[0],coins)>-1:                return 1+self.MakingChange(num-coins[0],coins)            else:                return -1        else:            return self.MakingChange(num,coins[1:])    def MakingChange(self,nums,coins):        # Given a set of coins and a num, what is the minimum number of coins required to change the num        # for each nums from 0 to nums, if j is a coin that is less than the number then total min(1+M[j-number]) coins is the smallest number of coins          M=[-1 for i in range(nums+1)]        M[0]=0        for i in range(1,nums+1):            output=[]            for j in range(len(coins)):                if i>=coins[j]:                    if M[i-coins[j]]>-1:                        output.append(1+M[i-coins[j]])            M[i]=min(output) if output else -1        return M.pop()        solution=Solution()print solution.MakingChange(32,[2,3,5])##class database:##    def __init__(self):##        self.stack=[]##        self.variableToValue={}##        self.valueToFreq={}####    def setVariable(self,variable, value):##        if self.variableToValue.has_key(variable):##            self.valueToFreq[self.variableToValue[variable][-1]]-=1##        self.valueToFreq[value]=self.valueToFreq[value]+1 if self.valueToFreq.has_key(value) else 1##        if self.stack:##            self.stack.append(variable)##        self.variableToValue.setdefault(variable,[]).append(value)####    def getVariable(self,variable):##        if self.variableToValue.has_key(variable):##            return self.variableToValue[variable][-1]##        else:##            return "NULL"####    def unset(self,variable):##        if self.variableToValue.has_key(variable):##            valueToDecrease=self.variableToValue[variable][-1]##            self.valueToFreq[valueToDecrease]-=1##            if self.valueToFreq[valueToDecrease]==0:##                del self.valueToFreq[valueToDecrease]##            del self.variableToValue[variable]####    def numequalto(self,value):##        if self.valueToFreq.has_key(value):##            return self.valueToFreq[value]##        else:##            return 0####    def startTransaction(self):##        self.stack.append("BEGIN")##    ##    def rollback(self):##        poppedVariable={}##        if not self.stack:##            print "NO TRANSACTION"##            return##        while self.stack[-1]!="BEGIN":##            variable=self.stack.pop()##            if not poppedVariable.has_key(variable):##                poppedVariable[variable]=self.variableToValue[variable][-1]##            self.variableToValue[variable].pop()##            if len(self.variableToValue[variable])==0:##                del self.variableToValue[variable]##        self.stack.pop()####        for variable,value in poppedVariable.iteritems():##            self.valueToFreq[value]-=1##            if self.valueToFreq[value]==0:##                del self.valueToFreq[value]##            if self.variableToValue.has_key(variable):##                valueToIncrease=self.variableToValue[variable][-1]##                self.valueToFreq[valueToIncrease]=self.valueToFreq[valueToIncrease]+1 if self.valueToFreq.has_key(valueToIncrease) else 0####    def commit(self):##        variables={}##        while self.stack:##            top=self.stack.pop()##            if top!='BEGIN':##                variables[top]=1##        for variable in variables:##            value=self.variableToValue[variable][-1]##            self.variableToValue[variable]=[value]##        ##if __name__=="__main__":####    db=database()####    db.setVariable("a",50)##    db.startTransaction()##    print db.getVariable("a")##    db.setVariable("a",60)##    db.startTransaction()##    #print db.numequalto(10)## #   db.startTransaction() ##    db.unset("a")##    print db.getVariable("a")###    print db.numequalto(10)###    db.setVariable("b",30) ####    print db.getVariable("a")## #   db.rollback()## #   print db.getVariable("a")##    db.rollback()    ##    print db.getVariable("a")##    db.commit()    ##    print db.getVariable("a")###    print db.numequalto(10)####    db.setVariable("a",10)####    db.startTransaction()####    db.setVariable("a",20)## #   db.commit()####    print db.getVariable("a")#### ##   print db.numequalto(10)